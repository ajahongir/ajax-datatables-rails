{
  "name": "Rails & DataTables",
  "tagline": "A wrapper around datatable's ajax methods that allow server-side pagination, ordering & searching out of box in a rails app",
  "body": "## Welcome to ajax-datatables-rails.\r\nDataTables is a plug-in for the jQuery Javascript library. It is a highly flexible tool, based upon the foundations of progressive enhancement, and will add advanced interaction controls to any HTML table. For more details loot at home [page](https://datatables.net/)\r\nThis gem fully supports DataTables behavior and easily integrates to rails app. No more need to wrire js or rb code, just setup your model datatable. \r\n\r\n## Description\r\nThis gem is based on DataTables idiom so It fully supports DataTable.\r\n\r\n## How-to project\r\nI always build admin page with some data presenting and I love to use DataTable in my projects. But Its to hard to build so many table with server-side pagination, ordering & searching. But now we have this tool! And Today I am going to show usage of this gem with a super easy [pattern](https://github.com/ajahongir/ajax-datatables-rails-v-0-4-0-how-to).\r\n\r\n## Basic usage\r\nLet's suppose that we have 2 models: countries and cities. So every country has many cities.\r\nwe build rails app.\r\n\r\n`$ rails new how-to`\r\n\r\n`$ bin/rails g model country name:string iata:string`\r\n\r\n`$ bin/rails g model city name:string iata:string timezone:string country:references`\r\n\r\n### Gemfile\r\n```ruby\r\ngem 'ajax-datatables-rails', github: 'ajahongir/ajax-datatables-rails', branch: 'v-0-4-0'\r\ngem 'jquery-datatables-rails'\r\ngem 'rails_script'\r\ngem 'js-routes'\r\ngem 'responders'\r\n```\r\n\r\nAnd then execute:\r\n`$ bundle`\r\n\r\n**rails_script**\r\n\r\nAfter bundling you need to run the initial installation generator for [rails_script](https://github.com/gemgento/rails_script):\r\n\r\n\r\n`rails g rails_script:install`\r\nand include `<%= include_rails_script %>` in application layout.\r\n\r\n**js-routes**\r\n\r\nAdd `//= require js-routes` in your application.js and after clear your cache `rake tmp:cache:clear`\r\n\r\nI add some defauls for DataTables to extend it:\r\n\r\n```coffee\r\n$ ->\r\n  $.extend $.fn.DataTable.defaults,\r\n    searching: true\r\n    ordering: true\r\n    deferRender: true\r\n    lengthMenu: [10, 25, 50, 100]\r\n    serverSide: true\r\n\r\n    initComplete: ->\r\n      $('.filters input, .filters select', @).on 'change', (e) =>\r\n        th = $(e.target).closest(\"th\")\r\n        @api().column(th.index()).search($(e.target).val()).draw()\r\n```\r\n\r\n### Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}